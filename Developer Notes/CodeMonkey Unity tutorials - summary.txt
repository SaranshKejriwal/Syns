Motivation - https://www.youtube.com/watch?v=XtQMytORBmM


More aligned playlist - https://www.youtube.com/watch?v=Nxg0vQk05os&list=PLtLToKUhgzwnk4U2eQYridNnObc2gqWo-

https://www.youtube.com/watch?v=8rTK68omQow


Open Unity "Syns" Project - 

Right click in Hierarchy - "Create Empty"
This creates a new "Game object" - like a layer in photoshop,

Eg. P2, P2, background, UI etc.
\
Inspector allows us to configure pos, orientation and scale of each GameObject.

Add Component > Rendering > Sprite Renderer
Used to render images into the GameObject.



________________________________
Unity tutorial 101: https://www.youtube.com/watch?v=AmGSEH7QcDg

Prerequisites :
1. C# basics crash course - https://www.youtube.com/watch?v=IFayQioG71A
2. Unity Setup - https://www.youtube.com/watch?v=hKXsL7XNa9M
3. Unity tutorial - https://www.youtube.com/watch?v=E6A4WvsDeLE

Recommendation is to use "3D (URP)" project, not standard 2D/3D - these are just basic packages. You're not blocked from making a 2D game on a 3D template.
URP - Universal Render Pipeline; ie, Platform agnostic. Steam/mobile/console
Controls should be rebindable.

Notes from #3 - Unity tutorial - https://www.youtube.com/watch?v=E6A4WvsDeLE

Change layout as guided
Scene View and Game View on the top left of the project main game layout.

Scene view shows all the objects created, from any perspective; Freeform rotation.
Game View will only be from the Main camera object's perspective.
in Hierarchy, select + and create new 3D obj

We start with the Main Cam and Directional light as the default objects

Rotating the Directional light controls the amount of ambient light in the scene
Camera tilt, zoom and pos can be corrected on the Inspector.

Inspector shows "components" attached to each GameObject.

Left CLick to select; Right Click drag to navigate - Arrows work too.

________________________________

GameObjects are the main building blocks.

Empty Gameobjects have a Name and a Transform component by default - Pos, Rotn, Scale;
Appearance is also a component. New components can be added to game objects.


Eg. Adding Mesh will define a shape for the GameObject visual, but it won't render it. Add an additional MeshRenderer component in the GameObject to provide it a shape. Mesh stores the Mesh object and MeshRenderer renders/displays it. Rendering is defined by "Materials", inside the MeshRenderer component.
In the Project Files, you can hit + and configure a new material - and how it will appear on the Scene.

________________________________
Adding Physics:

Add a RigidBody component to any GameObject, and make it a sphere
This will give it gravity;

When you go to GameView and hit play, the object will fall down (you should be able to see it on the camera). Add a "Plane" gameobj under it. If you tilt the planeObj, you'll see the sphere roll because of SphereCollider component.

________________________________
Adding Scripts

Each GameObject can have Components and SCRIPTS, which can act as Custom Components.

Go to Project Files > Assets (right click) > Create > C# Script;

This can be opened on Visual Studio from within Unity itself.

The script has 2 default functions:
- Start() - called only once on the first frame (like an initializer)
- Update() - called once per frame

All scripts need to extend MonoBehaviour class, which is the base unity class.
Once Script is Created, it can directly be added as a component on any GameObj

Adding logs in VS for the C# script  - logs will be seen in the Console next to the Project file when the game is running.

________________________________

All of this was done on 1 scene in the hierarchy.
Multiple scenes can be created for better organizing

Eg. Main menu screen, Gameplay screen, different subgame screen
A new Scene can be added from within the ProjectFiles
________________________________________________________________________-


https://www.youtube.com/watch?v=AmGSEH7QcDg

in Scene View, Center/Pivot and Local/Global are important. Global and Pivot setting to be used most often...whatever that means.
Layouts can also be saved on the top right.

Visual Studio setup_______________

Default Visual studio setup is fine. in Unity, Assets > Open C# project will open up Visual Studio directly.


Recommended coding style:
PascalCase() for functions, since Unity uses this, and this is also the C# standard.

camelCase for everything else.


Import Project files and assets from https://assetstore.unity.com/3d

Post-Processing______________________
Being added early for our benefit. URP adds PostProc by default
Your main "SampleScene" (renamed to GameScreen), contains a "Global Colume" game obj - check the components under GameScene

To make a new PostProc from scratch - Delete the SampleSceneSettings from Project>Settings and define new components within "Global Volume" Game Obj

Add a new Plane GameObj for the floor (next to "Global Volume") - Transform should be on (0,0,0) because new load will try to put the obj in front of the camera.

Materials for any GameObj are imported within the assets that you add to your project.


Add more components of the game from within the Assets folder to the game scene - Go for "Models" or "Prefabs" inside the assets package folder that you import.

IMPORTANT - Once you've identified an orientation from which you want the game to run, select Main Camera obj from Hierarchy and click on Ctrl+Shift+F to set the same orientation in Game View as well;

You can select multiple orbjects in hierarchy and orient them at once.

Once that's done - Add Components to Global Volume GamObj for PostProc - these work on GameView only:
- Tonemapping - If you Can't find it, make sure that the Profile under the Volume Component of Global Volume is not None.; 

In Settings, select Renderer to specify Occlusion - minor tweaks on the appearance.


Create Character Controller_____________________________

Recommendation is to always keep the GameObject visuals from its "logic". Best to have a uniform scale on a logic game object.
For these reasons, if you want a game object with movement and/or positioning AND visual, you first create an empty game object, which will be the container for your logic, and then INSIDE this empty object, you create a new 3D object, purely for the visual.
This way, you can permanently offset the visual above the ground, by changing fixing the position of the Visual object only. Your logic will move the parent Game object. Especially useful when you need to switch between visual assets. New asset can be dropped into the Parent obj directly.

Create a new folder in Assets for Scripts - Scripts should only be added as components 

Framerate also plays a role in the perceived character speed. Higher framerate, equals more response to keypress

public variables in the script can be controlled from within the inspector. However, it also means that you won't be able to debug changes in the variable. Always make it private, but add [SerializeField] attribute


________________________________

You can specify a mesh with new color attribs and all objects using that mesh will be updated.

Animations should be added to the visual component only - using "Animator" component.
Need to add "Animator COntroller" on Project files...typically picked up from asset store itself.

Ensure that Parameters are configured in Animator to trigger walking animation on keypress only - you need a boolean param for this; Animation Transitions should not have an Exit time. 
Note that the boolean param will be triggered on keypress...best to have a separate C# script for it, and not have the animation controlled in Movement logic.

In case you're referring to the logic class inside its child animator class, make sure that you add the reference of the parent logic class in the Inspector as well.


Cinemachine_____________________

Handles Camera movement; Useful
Open Window > Package Manager to install it.

You can create new Camera GameObj from GameObject menu > Cinemachine;
Main Camera will get a "CinemachineBrain" component added to it. Cinemachine works on top of the Main Camera Gameobj. Main Camera will now be locked for Manual editing. Cinemachine now drives the main camera.

If you configure Cinemachine camera to follow a target, the relative Camera position offset from the target GameObj needs to be specified in the "Follow Offset", under the Body of the CinemachineVirtualCamera object of the new Virtual Camera. For best results, leave the "Binding Mode" in Body to "World Space", so that the camera doesn't jump suddenly.


Input System Refactor______________

The "new input system" allows you to manage key rebindings later.
Recommendation is to have a separate class to handle input only, and a separate empty Gameobject; The empty gameObj reference will be needed in Unity, once you use the InputHandler anywhere else.

1 Class, 1 Purpose;

Add the new "Input System" package from Package maanger - this will be used in the new InputHandler class.
New Input system allows you to create an "Input Actions" asset in the project - which allows you to configure different Action Maps and sub-actions by Value (for multiple movements) or button

Now both Old and New input manager can be managed from within the InputHandler classl, without disturbing the PLayer classes.
New Input system makes it easy to bind gamepads and controllers.


Collision Detection_____________
 
 Physics.Raycast() is used for collision detection - ensure that the obstacle is touching the floor, meaning that the parent component has a Y=0 (same for Player) and should have a BoxCollider component.

Note that Raycast will only be from object center, meaning that it may seem like the eadges of the object are pass-through. CapsuleCast works better

Ensure that the size in the Box Collider is the same as the size in the visual child object.

Adding Interactions________________________________

"Magic numbers" - when you hardcode a number in a function argument, come back a month later, and forget what that number represents.

If you want multiple copies of an object, create a "prefab" rather than copying the object - changes to prefab apply across the board. 

This is useful for setting up Enemy logic and animations as a central prefab and then spawn all enemies with base logic configured.

Create a Prefab folder and drop the logic GameObj into the folder. The GameObj now has a blue icon.
(useful for enemy spawn)
Ensure that Interaction logic applies to the prefab, not just to one instance of it.

Tip - NEVER use Unity tags to determine the type of object that was interacted with.



EventHandler - Interaction Action________________________________

Useful for configuring actions based on player input. Meaning that interact will only happen if player presses a key - like attack
Alternative is to keep checking the rayCastHit on every single update call, despite dependency on playerInput. This will be needed for PlayerTwo, not PlayerOne

You don't need to call it on EVERY Update call, which optimizes performance;

Events have publishers which fire events, and subscribers, that respond to them;
Eg. playerOne can listen to the event hosted in inputhandler about M key being pressed. PlayerOne class does not have to care about the binding at all.

Every Event should always have a subscriber, else you'll get a nullReferenceException

listen to events in Start(), not Awake() - Awake() functions are called together and may not be in the expected order. Start() function is ALWAYS called after Awake() function calls for each class.

Use Awake() for initializing that script, and Start for initializing any external references

Singleton Pattern____________________________

Using to add a visual to a selecteed object. Ideally, the code to change an object's visual should reside within that object only.
Create a new sub visual object in the prefab next to the current visual object - this will be the object for the interacted and will be in disabled state by default
Make a small increase in size of the interacted object (1 -> 1.01) - prevents some unknown unity bugs.

Singleton class needs multiple instances of an object class to listen to the same event.

Singleton is useful when multiple objects of one class need to refer the same object of another class - eg. All enemies need to target only 1 instance of PlayerTwo - Need not configure PLayerTwo reference in inspector everytime.

Other classes can also listen to the Events OF the player singleton.


Scriptable Objects______________________________

Objects that player can pickup and drop - useful for the Key to Exit.
Also useful for creating spawning object, like enemies, after a set duration.

such Prefabs can be used as "Transform"s or "GameObject"s - Don't know the difference.

Scriptable Objects are useful for creating multiple instances of one type - like weapons, enemies;

This will be useful to define the 7 types of enemies and bosses, I guess.

Scriptable objects extend ScriptableObject, not MonoBehaviour. These need CreateAssetMenu() for creating an object - this would allow you to create an object of this type from within the Project window itself.

Not sure if we need them for our use-case - EnemyBuff can be applied consistently. This would be useful if you had a variable set of objects at once.
<Skipping this...>


Object Parent_______________

Useful for defining where an object belongs - eg. Picking up stuff. Each object will be attached to a parent, either its spawn location, or Player - useful for the Key, and the Player buffs.

Gold etc can disappear when in vicinity.

Player Tools can have 4 parents - Shop, Sack, P1, P2.
Key can have 2 parent - spawn location (meh) and P2.

No rocket science - just getters and setters -> setParentOfChildObject(this);

Interfaces___________________________________________________________

2 classes of different type must implement a common interface to share a set of functions. We solved this using inhetirence
 
 public interface IObject{} - the I prefix is the naming convention. Interfaces don't have function implementations.
multiple interfaces can be inherited using the comma separation between their names, but you can inherit only 1 base class

Prefab Variants_______________________________________________

Sounds useful for having different enemy types for each syn. Create a base prefab which will only contain the common elements for each child prefab.

Right-Click on this counter to create "Prefab variant".

Inheritence is dangerous, apparently. 
Make a function virtual if you want the child class to have its own implementation. "abstract" keyword makes the implementation mandatory.

______________________________________________________________________________
Used https://www.youtube.com/watch?v=ya1HyptE5uc for Maze construction.

[SerializeField][Range(1,8)] allows serialized field to only move in that range,


________________________________
https://www.youtube.com/watch?v=yoDQD9rG0Vw

Call a function only when Animation completes. "Animation Event". Video above explains how to deal with Read Only animations.

You need to duplicate the triangle shaped animation component, not the entire prefab package.
As soon as you clone that particular triangle animation object, you can "Add Event" from the Animation tab in the inspector, and specify the public function that you want to call, only when the animation ends.

Open Prefab and check "Animation" tab next to console.

Note - if you rename a function, Animation Event will not automatically rename it in Unity Inspector. Will need manual change.